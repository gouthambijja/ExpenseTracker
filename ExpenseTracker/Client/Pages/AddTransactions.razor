@using ExpenseTracker.Client.ViewModels;
@using ExpressTrackerLogicLayer.Models;
@inject ITransactionViewModel _transactionViewModel
@inject StateContainerService stateService


 <EditForm Model="_transactionViewModel" class=" shadow p-5 rounded " OnSubmit="@AddTransaction">

        <div class="form-floating mb-3 ">
            <input type="text" required class="form-control" @bind= "_transactionViewModel.Name" @bind:event="onchange"  id="TransactionName" placeholder="Transaction Name">
            <label for="TransactionName">Name</label>
        </div>
        <div class="form-floating mb-3">
            <input type="number" min="1" step="any"  required class="form-control" @bind="_transactionViewModel.Amount" id="TransactionAmount" placeholder="Amount">
            <label for="TransactionAmount">Amount</label>
        </div>
        <div class="form-floating mb-3">
            <input type="text" class="form-control" @bind="_transactionViewModel.Description" id="TransactionDescription" placeholder="Description">
            <label for="TransactionDescription">Description</label>
        </div>
        <select class="form-select mb-3 " @bind="_transactionViewModel.Category"  >
            <option selected>Open this select menu</option>
        <option value="Groceries">Groceries</option>
        <option value="Transportation">Transportation</option>
        <option value="Entertainment">Entertainment</option>
        <option value="Unassigned">Unassigned</option>
        <option value="Dining out">Dining out</option>
        @if (Categories != null)
        {
            @foreach (var item in Categories)
            {
                <option value="@item.Name">@item.Name</option>
            }
        }

    </select>
        <button type="submit" class="btn btn-primary" >Add Transaction</button>
        <div class="text-center m-3">
        </div>

    </EditForm>
@code {

    [Parameter]
    public List<BLCategory> Categories{ get; set; }
    public async void AddTransaction()
    {
        _transactionViewModel.UserId = stateService.User.UserId;
        _transactionViewModel.TransactionId = "";
        var transaction = await _transactionViewModel.AddTransaction();
        stateService.AddTrasaction(transaction);
    }
}