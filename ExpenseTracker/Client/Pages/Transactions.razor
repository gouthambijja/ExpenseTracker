@using ExpenseTracker.Client.ViewModels;
@using ExpressTrackerLogicLayer.Models;
@inject IHomeViewModel _homeViewModel
@inject StateContainerService stateService
@implements IDisposable
@inject IToastService toastService
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject NavigationManager nav

<div class="container TransactionContainer w-65 m-auto">
    @if (stateService.Transactions != null)
    {
        
        @for (i = 0; i < transactions.Count();)
        {
            <div class="row mb-2">
                @for (int j = 0; i < transactions.Count() && j < 3; j++, i++)
                {
                    <div class="col-md-4">
                        <div class="card text-center shadow">
                            <div class="card-header bg-transparent" >
                                @transactions[i].Name
                            </div>
                            <div class="card-body">
                                <h5 class="card-title">@transactions[i].Amount</h5>
                                <p class="card-text">@transactions[i].Category</p>
                                <a href="#" class="btn btn-primary">@transactions[i].Description</a>
                            </div>
                            <div class="card-footer text-muted bg-transparent">
                                @transactions[i].Date
                            </div>
                        </div>
                    </div>
                }
            </div>
        }

    }
</div>

@code {
    public int i = 0;
    [Parameter]
    public List<BLTransaction> transactions { get; set; }

    protected override async Task OnInitializedAsync()
    {
        stateService.OnStateChange += StateHasChanged;

    }
    protected override async Task OnParametersSetAsync()
    {
    }
    public void Dispose()
    {
        stateService.OnStateChange -= StateHasChanged;
    }
}
